package kvraft

import (
	"6.5840/labgob"
	"6.5840/labrpc"
	"6.5840/raft"
	"log"
	"sync"
	"sync/atomic"
	"time"
	"fmt"
	"bytes"
)

const Debug = true
const MaxWaitChPoolSize = 100
func DPrintf(format string, a ...interface{}) (n int, err error) {
	if Debug {
		log.Printf(format, a...)
	}
	return
}
func max(a, b int) int{
        if a > b{
                return a
        }
        return b
}
func (op Op) String() string {
    return fmt.Sprintf("Operation: %s, Key: %s, Value: %s, ClientID: %d, Seq: %d", op.Op, op.Key, op.Value, op.ClientID, op.Seq)
}
type Op struct {
	// Your definitions here.
	// Field names must start with capital letters,
	// otherwise RPC will break.
	Op string
	Key string
	Value string
	ClientID int64
	Seq int
}

type KVServer struct {
	mu      sync.Mutex
	me      int
	rf      *raft.Raft
	applyCh chan raft.ApplyMsg
	dead    int32 // set by Kill()

	maxraftstate int // snapshot if log grows this big
	// Your definitions here.
	waitChs  map[int]chan *Op
	waitChPool chan chan *Op

        db map[string]string
        lastSeq map[int64] int
	timeout time.Duration

}


// 初始化 KVServer
func (kv *KVServer) initWaitChPool() {
    kv.waitChPool = make(chan chan *Op, MaxWaitChPoolSize)
    for i := 0; i < MaxWaitChPoolSize; i++ {
        ch := make(chan *Op, 1)
        kv.waitChPool <- ch
    }
}

// 获取等待通道
func (kv *KVServer) getWaitCh() chan *Op {
    select {
    case ch := <-kv.waitChPool:
        return ch
    default:
        return make(chan *Op, 1)
    }
}

// 归还等待通道到池中
func (kv *KVServer) putWaitCh(ch chan *Op) {
    select {
    case kv.waitChPool <- ch:
    default:
        // 如果池已满，直接关闭通道
        close(ch)
    }
}

func (kv *KVServer) Get(args *GetArgs, reply *GetReply) {
	// Your code here.
	DebugF(dInfo, "K%d have a get command", kv.me)	
	oldTerm, isLeader := kv.rf.GetState()
	if !isLeader{
		reply.Err = ErrWrongLeader
		return
	}
	op := Op{
		Op: "Get",
		Key: args.Key,
		Value: "",
		ClientID: args.ClientID,
		Seq: args.Seq,
	}

	DebugF(dServer, "K%d show op:%v", kv.me, op)

	index, _, _ := kv.rf.Start(op)

	kv.mu.Lock()
        waitCh, ok := kv.waitChs[index]
	if !ok{
		kv.waitChs[index] = make(chan *Op, 1)
		waitCh = kv.waitChs[index]
	}
	kv.mu.Unlock()

	DebugF(dServer, "K%d g create a get channel", kv.me)

	select {
		//等待apply处理完成之后向相应的通道返回请求结构体
	case op := <- waitCh:
		//如果start完成，但是apply之前失去领导权，就要通过raft的任期已更改判断出来
		DebugF(dServer, "K%d dealing reply", kv.me)
		if newTerm, _ := kv.rf.GetState(); newTerm != oldTerm{
			reply.Err = ErrWrongLeader
		}else{
			reply.Value = op.Value
			reply.Err = OK
		}
	case <- time.After(kv.timeout * time.Millisecond):
		DebugF(dError, "K%d has a timeout", kv.me)
		reply.Err = ErrWrongLeader

   	 }
	 kv.mu.Lock()
	 delete(kv.waitChs, index)
	 kv.mu.Unlock()
	 DebugF(dServer, "K%d g delete a get channel", kv.me)


}


func (kv *KVServer) PutAppend(args *PutAppendArgs, reply *PutAppendReply) {
	// Your code here.
	DebugF(dInfo, "K%d have a putAppend command", kv.me)

	oldTerm, isLeader := kv.rf.GetState()
        if !isLeader{
                reply.Err = ErrWrongLeader
		DebugF(dError, "K%d not leader", kv.me)
                return
        }
	op := Op{
                Op: args.Op,
                Key: args.Key,
                Value: args.Value,
		ClientID: args.ClientID,
                Seq: args.Seq,
        }
	DebugF(dServer, "K%d show op:%v", kv.me, op)
	index, _, _ := kv.rf.Start(op)
	kv.mu.Lock()
        waitCh, ok := kv.waitChs[index]
        if !ok{
                kv.waitChs[index] = make(chan *Op, 1)
                waitCh = kv.waitChs[index]
        }
	kv.mu.Unlock()

	DebugF(dServer, "K%d p create a putAppend channel", kv.me)
        select {
                //等待apply处理完成之后向相应的通道返回请求结构体
	case <- waitCh:
                //如果start完成，但是apply之前失去领导权，就要通过raft的任期已更改判断出来
		DebugF(dServer, "K%d is handling reply", kv.me)

                if newTerm, _ := kv.rf.GetState(); newTerm != oldTerm{
                        reply.Err = ErrWrongLeader
                }else{
                	reply.Err = OK
		}
        case <- time.After(kv.timeout * time.Millisecond):
		DebugF(dError, "K%d has a timeout", kv.me)
                reply.Err = ErrWrongLeader

         }
	 kv.mu.Lock()
	 delete(kv.waitChs, index)
	 kv.mu.Unlock()
	 DebugF(dServer, "K%d p delete a putAppend channel", kv.me)

}


func (kv *KVServer) applier() {
	for !kv.killed(){
		m, ok := <-kv.applyCh
//		kv.mu.Lock()
		if ok{
			if m.SnapshotValid {
				DebugF(dError, "K%d must ingest snapshot!!!", kv.me)
				kv.mu.Lock()
                        	kv.ingestSnapL(m.Snapshot)
				kv.mu.Unlock()
			}else{
				DebugF(dServer, "K%d dealing a command hi", kv.me)
				op := m.Command.(Op)

				kv.mu.Lock()
				//执行相应的命令
				kv.handleL(&op)

				index := m.CommandIndex
				waitCh, ok2 := kv.waitChs[index]


				if ok2{
					waitCh <- &op
					DebugF(dServer, "K%d send op to channel", kv.me)
				}
				kv.mu.Unlock()

//以下是为了lab3B测试做出的努力
				if kv.maxraftstate != -1 && kv.maxraftstate <= kv.rf.RaftStateSize(){
                               	 	w := new(bytes.Buffer)
                                	e := labgob.NewEncoder(w)
                                	e.Encode(kv.db)
                                	e.Encode(kv.lastSeq)
					DebugF(dError, "K%d server ready to store its state", kv.me)
                                	kv.rf.Snapshot(m.CommandIndex, w.Bytes())
                       		}
//以上是为了lab3B测试做出的努力


			}
		}
		//kv.mu.Unlock()
	}
}

func (kv *KVServer) ingestSnapL (snapshot []byte) {
	if snapshot == nil {
		DebugF(dError, "K%d is ingesting a nil snapshot", kv.me)
	}
	r := bytes.NewBuffer(snapshot)
        d := labgob.NewDecoder(r)
	var db map[string]string
        var lastSeq map[int64] int
        if d.Decode(&db) != nil ||
                d.Decode(&lastSeq) != nil {
			DebugF(dError, "K%d having wrong with snapshot", kv.me)
               		return 
        }else{
		kv.db = db
		kv.lastSeq = lastSeq
		DebugF(dError, "K%d is ingesting a snapshot!!!!!", kv.me)
		DebugF(dError, "K%d, db:%v, lastSeq:%v", kv.me, kv.db, kv.lastSeq)
	}
	return 
}





func (kv *KVServer) DetectDuplicatesL(op *Op) bool{
        if lastSeq, ok := kv.lastSeq[op.ClientID]; ok{
                if lastSeq >= op.Seq{
                        return true
                }
        }
        return false
}

func (kv *KVServer) handleL(op* Op){
	if op.Op == "Get"{
		val, ok := kv.db[op.Key]
		if !ok{
			op.Value = ""
		}else{
			op.Value = val
		}
		DebugF(dData, "K%d db:%v, key:%v, value:%v", kv.me, kv.db, op.Key, op.Value)
	}else{
		if duplicate := kv.DetectDuplicatesL(op);duplicate{
			return
		}
		if op.Op == "Put"{
			DebugF(dData, "K%d before: db:%v", kv.me, kv.db)
			kv.db[op.Key] = op.Value
			DebugF(dData, "K%d aft: db:%v", kv.me, kv.db)

		}else if op.Op == "Append"{
			DebugF(dData, "K%d before: db:%v", kv.me, kv.db)
			oldVal , ok := kv.db[op.Key]
			if !ok{
				oldVal = ""
			}
			kv.db[op.Key] = oldVal + op.Value
			DebugF(dData, "K%d aft: db:%v", kv.me, kv.db)

		}
	}
	//DebugF(dInfo, "K%d lastSeq[clienID]:%d, op.Seq:%d", kv.me, kv.lastSeq[op.ClientID], op.Seq)
	kv.lastSeq[op.ClientID] = op.Seq
	return
}


// the tester calls Kill() when a KVServer instance won't
// be needed again. for your convenience, we supply
// code to set rf.dead (without needing a lock),
// and a killed() method to test rf.dead in
// long-running loops. you can also add your own
// code to Kill(). you're not required to do anything
// about this, but it may be convenient (for example)
// to suppress debug output from a Kill()ed instance.
func (kv *KVServer) Kill() {
	atomic.StoreInt32(&kv.dead, 1)
	kv.rf.Kill()
	// Your code here, if desired.
}

func (kv *KVServer) killed() bool {
	z := atomic.LoadInt32(&kv.dead)
	return z == 1
}

// servers[] contains the ports of the set of
// servers that will cooperate via Raft to
// form the fault-tolerant key/value service.
// me is the index of the current server in servers[].
// the k/v server should store snapshots through the underlying Raft
// implementation, which should call persister.SaveStateAndSnapshot() to
// atomically save the Raft state along with the snapshot.
// the k/v server should snapshot when Raft's saved state exceeds maxraftstate bytes,
// in order to allow Raft to garbage-collect its log. if maxraftstate is -1,
// you don't need to snapshot.
// StartKVServer() must return quickly, so it should start goroutines
// for any long-running work.
func StartKVServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister, maxraftstate int) *KVServer {
	// call labgob.Register on structures you want
	// Go's RPC library to marshall/unmarshall.
	labgob.Register(Op{})

	kv := new(KVServer)
	kv.me = me
	kv.maxraftstate = maxraftstate

	// You may need initialization code here.

	kv.applyCh = make(chan raft.ApplyMsg)
	kv.rf = raft.Make(servers, me, persister, kv.applyCh)

	// You may need initialization code here.
	kv.waitChs = make(map[int]chan *Op)
	kv.db = make(map[string]string)
	kv.lastSeq = make(map[int64] int)
	kv.timeout = 100
	kv.initWaitChPool()

	//从通道中读取命令
	go kv.applier()


	return kv
}

